(self.webpackChunk=self.webpackChunk||[]).push([[8372],{4702:(e,t,s)=>{"use strict";s.r(t),s.d(t,{data:()=>r});const r={key:"v-0a4c1684",path:"/jp/frontend/react-difference-between-usestate-useref.html",title:"React useState / useRef hooksの違い",lang:"ja-JP",frontmatter:{},excerpt:"",headers:[{level:3,title:"useState",slug:"usestate",children:[]},{level:3,title:"useRef",slug:"useref",children:[]},{level:3,title:"Reference",slug:"reference",children:[]}],filePathRelative:"jp/frontend/react-difference-between-usestate-useref.md",git:{updatedTime:1628002356e3,contributors:[]}}},6174:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});const r=(0,s(6252).uE)('<h1 id="react-usestate-useref-hooksの違い" tabindex="-1"><a class="header-anchor" href="#react-usestate-useref-hooksの違い" aria-hidden="true">#</a> React useState / useRef hooksの違い</h1><p><code>Written: 2021-08-03</code></p><p>関数コンポーネントはレンダリングする度に関数の処理を実行する。なので、基本的に関数の中に値を保存することはできず、代わりに<code>hooks</code>を用いる必要がある。 デフォルトのhooksはいろんなものがあるが、データを保存するものは<code>useState</code>と<code>useRef</code>くらいがある。Reactを使い始めたばかりの時は<code>useMemo</code>も値を保存するものだと思っていたけど、少し勉強してみるとVueの<code>computed</code>のようなものだったってことがわかったのでここでは書かない。</p><h3 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate" aria-hidden="true">#</a> useState</h3><p>言葉通り<strong>ステート</strong>をもつ。使うときは<code>getter / setter</code>を指定し、値を変えるときに<code>setter</code>を呼ぶことで値を変えることができる。 <strong>ステートが変わるとコンポーネントがそれを検知し、レンダリングする</strong>。</p><h3 id="useref" tabindex="-1"><a class="header-anchor" href="#useref" aria-hidden="true">#</a> useRef</h3><p>言葉通り<strong>参照</strong>をもつ。DOMを指すときに使う<code>ref</code>と名前が一緒で、実際それとして使えるがとりあえず違うものだ。 useRefは可変データを持っているためいつでも値を変えることができる。useStateは不変(stateは不変で、変えるときは<code>setter</code>を使う)なので直接値を変えてはいけない。 useRefの値はobjectで包まれているため、使う時は<code>.current</code>する必要がある。 一番大事なことで、<strong>stateと違い、値が変わってもコンポーネントがレンダリングをしない</strong>。</p><p>inputタグの値を<code>state</code>で設定すると<strong>inputが変わるたびにコンポーネントがレンダリングされてしまう。</strong> つまり、不要なレンダリングを繰り返すことで性能に問題が起きる可能性がある。<code>ref</code>で値を指定するとinputが変わってもコンポーネントをレンダリングしないため、不要な演算を減らすことができる。</p><h3 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h3><p>https://www.codebeast.dev/usestate-vs-useref-re-render-or-not/</p>',10),a={render:function(e,t){return r}}}}]);