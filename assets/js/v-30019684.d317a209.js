(self.webpackChunk=self.webpackChunk||[]).push([[4447],{9215:(e,r,o)=>{"use strict";o.r(r),o.d(r,{data:()=>t});const t={key:"v-30019684",path:"/_draft/Javascript/for.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Date: 2021-03-28",slug:"date-2021-03-28",children:[]},{level:2,title:"for문",slug:"for문",children:[{level:3,title:"for-in",slug:"for-in",children:[]},{level:3,title:"for-of",slug:"for-of",children:[]}]}],filePathRelative:"_draft/Javascript/for.md",git:{updatedTime:null,contributors:[]}}},9957:(e,r,o)=>{"use strict";o.r(r),o.d(r,{default:()=>a});const t=(0,o(6252).uE)('<h2 id="date-2021-03-28" tabindex="-1"><a class="header-anchor" href="#date-2021-03-28" aria-hidden="true">#</a> Date: 2021-03-28</h2><h2 id="for문" tabindex="-1"><a class="header-anchor" href="#for문" aria-hidden="true">#</a> for문</h2><p>전통적인 <code>for</code>문은 따로 쓸 내용이 없음.</p><h3 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in" aria-hidden="true">#</a> for-in</h3><p>열거 가능한 속성들을 포함하여 객체에서 문자열로 키가 지정된 모든 열거 가능한 <strong>속성</strong>에 대해 반복 객체의 <strong>문자열 키</strong>에 대해 반복함을 의미. 자바스크립트에서 배열은 객체(키가 숫자(인덱스)인 열거형 객체)이므로 <code>for-in</code>을 통한 반복이 가능하다.</p><p>여기서 문제는, <code>for-in</code>의 경우 객체의 <strong>열거 가능한 속성</strong>에 대해 반복하므로, 프로토타입에 대한 접근(프로토타입에 열거 가능한 속성이 존재하면 해당 속성도 반복한다)을 필요로 하기 때문에, 불필요한 접근이 잦아진다는 점이다. 이는 곧 속도 저하로 이어지며, 원하지 않았던 값이 반복문에 끼어 버리는 문제가 발생할 수 있다(이는 <code>hasOwnProperty</code>를 통해 회피할 수 있으나 불필요한 연산이 추가되게 된다). 따라서 특수한 목적(객체의 속성 확인하기 등)이 없는 한 <code>for-in</code> 순회는 가급적 쓰지 않는 것이 좋다.</p><h3 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of" aria-hidden="true">#</a> for-of</h3><p><code>for-in</code>에서의 불편함을 개선하고자 ES6부터는 <code>for-of</code>라는 문법을 지원한다. <code>for-of</code>는 키가 아닌 값을 받아 순회한다. 또한 반복 가능한 객체(Symbol.iterator 속성이 있는 객체)를 순차적으로 순회한다. 즉 <code>iterable</code>하지 않은 객체는 <code>for-of</code>를 사용할 수 없다.</p>',8),a={render:function(e,r){return t}}}}]);