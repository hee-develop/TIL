(self.webpackChunk=self.webpackChunk||[]).push([[610],{9044:(e,a,l)=>{"use strict";l.r(a),l.d(a,{data:()=>r});const r={key:"v-6f66a566",path:"/ko/development-theory/dry-kiss-yagni.html",title:"DRY, KISS, YAGNI",lang:"ko-KR",frontmatter:{heroText:"DRY, KISS, YAGNI"},excerpt:"",headers:[{level:3,title:"소프트웨어 개발 원칙",slug:"소프트웨어-개발-원칙",children:[]},{level:3,title:"DRY - Don't Repeat Yourself",slug:"dry-don-t-repeat-yourself",children:[]},{level:3,title:"KISS - Keep It Small and Simple",slug:"kiss-keep-it-small-and-simple",children:[]},{level:3,title:"YAGNI - You Ain't Gonna Need it",slug:"yagni-you-ain-t-gonna-need-it",children:[]},{level:3,title:"소감",slug:"소감",children:[]},{level:3,title:"참고 링크",slug:"참고-링크",children:[]}],filePathRelative:"ko/development-theory/dry-kiss-yagni.md",git:{updatedTime:1624775244e3,contributors:[{name:"hee-develop",email:"hee950320@yahoo.co.jp",commits:1}]}}},7714:(e,a,l)=>{"use strict";l.r(a),l.d(a,{default:()=>o});var r=l(6252);const t=(0,r.uE)('<h1 id="dry-kiss-yagni" tabindex="-1"><a class="header-anchor" href="#dry-kiss-yagni" aria-hidden="true">#</a> DRY, KISS, YAGNI</h1><p><code>Written: 2021-02-03</code></p><h3 id="소프트웨어-개발-원칙" tabindex="-1"><a class="header-anchor" href="#소프트웨어-개발-원칙" aria-hidden="true">#</a> 소프트웨어 개발 원칙</h3><p>소프트웨어를 개발하는 데 있어 더 나은 코드를 작성하기 위한 개발 원칙</p><h3 id="dry-don-t-repeat-yourself" tabindex="-1"><a class="header-anchor" href="#dry-don-t-repeat-yourself" aria-hidden="true">#</a> DRY - Don&#39;t Repeat Yourself</h3><p>같은 일을 두 번 <span style="color:red;">반복하지 않도록 할 것</span>을 의미함<br> 겹치는 부분이 있으면 하나의 공통 컴포넌트를 만들어 사용하게끔 만듦<br> 비슷하지만 다른 기능을 만들 때 복붙해서 수정하지 말고 공통점을 찾아 함수 등으로 빼 두는 것이 좋음</p><ul><li>비슷한 기능은 묶어서 구현하는 것이 읽기 쉬운 코드를 만듦</li></ul><h3 id="kiss-keep-it-small-and-simple" tabindex="-1"><a class="header-anchor" href="#kiss-keep-it-small-and-simple" aria-hidden="true">#</a> KISS - Keep It Small and Simple</h3><p>해외 투고를 보면 <em>Keep it simple, stupid</em> 라는 문구가 대부분이었지만 어감이 별로 좋지 않아 다른 약어로 작성<br><span style="color:red;">설계를 간단하고 단순하게</span>하는 것을 의미함<br> 복잡한 기능도 자세히 살펴보면 단순한 기능 여러 개로 분리할 수 있음</p><ul><li>복잡한 기능은 여러 개의 단순한 기능으로 쪼개어 구현하는 것이 읽기 쉬운 코드를 만듦</li></ul><h3 id="yagni-you-ain-t-gonna-need-it" tabindex="-1"><a class="header-anchor" href="#yagni-you-ain-t-gonna-need-it" aria-hidden="true">#</a> YAGNI - You Ain&#39;t Gonna Need it</h3><p>지금은 필요하지 않지만, 향후에 필요하다고 생각되는 것을 <span style="color:red;">미리 추가하지 말 것</span>을 의미함<br> 미리 추가하면, 다음과 같은 비용이 소모됨</p><ul><li>개발자는 개발 목표를 벗어난 부분까지 구현을 하기 때문에 개발에 추가적인 시간이 소요됨</li><li>기능 출시 전 테스트나, 코드 분석을 할 때 등, 지금 동작하지 않는 기능도 확인해야 하므로 불필요한 시간이 소모됨 추후를 위해 미리 개발해두는 것은 좋은 태도지만, 이렇게 미리 개발해 둔 기능이 실제로 추후 사용될지는 불분명함(경우에 따라서는 미리 만들어 둔 기능이 전혀 도움이 안 될 때도 있음) 따라서 지금은 지금 필요한 기능만 만들어 기능을 최소화하는 것이 좋음</li><li>(지금) 불필요한 기능은 구현하지 않음으로써 단순한 코드를 만듦</li></ul><hr><h3 id="소감" tabindex="-1"><a class="header-anchor" href="#소감" aria-hidden="true">#</a> 소감</h3><p>단순하면서도 읽기 쉬운 코드란 무엇일까? 에 대한 대답을 하기 위한 여정의 일부 같았다. 여태까지 내가 어떻게 코드를 작성해왔는지 되돌아볼 수 있는 시간이었다. &#39;원칙&#39;이라는 개념으로 의식하면서 쓰지는 않았으나 그동안 나름 잘 지켜 왔던 것 같기도..</p><p>추가) 영문으로 된 글에는 원칙(rule) 아닌 원리(principle)로 설명을 하는 곳이 많았지만, 개인적으로 사전적 의미의 &#39;원리&#39;와는 거리가 멀다고 생각해 원칙으로 작성함.</p><h3 id="참고-링크" tabindex="-1"><a class="header-anchor" href="#참고-링크" aria-hidden="true">#</a> 참고 링크</h3>',18),i={href:"https://hongjinhyeon.tistory.com/136",target:"_blank",rel:"noopener noreferrer"},n=(0,r.Uk)("소프트웨어 개발의 3개의 KEY 원칙 : KISS,YAGNI,DRY"),d={href:"https://code.tutsplus.com/tutorials/3-key-software-principles-you-must-understand--net-25161",target:"_blank",rel:"noopener noreferrer"},s=(0,r.Uk)("3 Key Software Principles You Must Understand"),o={render:function(e,a){const l=(0,r.up)("OutboundLink");return(0,r.wg)(),(0,r.j4)(r.HY,null,[t,(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,[(0,r.Wm)("a",i,[n,(0,r.Wm)(l)])]),(0,r.Wm)("li",null,[(0,r.Wm)("a",d,[s,(0,r.Wm)(l)])])])],64)}}}}]);