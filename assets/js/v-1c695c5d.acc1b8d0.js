(self.webpackChunk=self.webpackChunk||[]).push([[556],{8764:(e,t,c)=>{"use strict";c.r(t),c.d(t,{data:()=>i});const i={key:"v-1c695c5d",path:"/ko/frontend/fetch-api.html",title:"fetch API",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[],filePathRelative:"ko/frontend/fetch-api.md",git:{updatedTime:1627997873e3,contributors:[]}}},3684:(e,t,c)=>{"use strict";c.r(t),c.d(t,{default:()=>d});const i=(0,c(6252).uE)('<h1 id="fetch-api" tabindex="-1"><a class="header-anchor" href="#fetch-api" aria-hidden="true">#</a> fetch API</h1><p><code>Written: 2021-07-12</code></p><p>여태까지 프론트엔드의 AJAX는 <code>XMLHttpRequest</code>만 있는 줄 알았는데 최근 <code>fetch API</code>라는 것을 알게 되었다. PWA를 만들 때 사용되는 Service Worker가 <code>fetch</code>를 intercept해서 캐싱하므로 PWA를 만들고자 할 땐 <code>XMLHttpRequest</code>를 사용하지 않도록 주의가 필요하다(비동기 통신에 자주 사용되는 <code>axios</code>가 <code>XMLHttpRequest</code>기반으로 동작하므로 특히 주의해야 함).</p><ul><li><code>fetch</code>는 Web API의 일부이다. 따라서 별도의 라이브러리 설치가 필요하지 않다는 장점을 갖는다.</li><li>Promise를 반환해 예쁜 코드를 작성하기가 더 좋다.</li><li>Interceptor에 대한 정의가 없다. 따라서 쿠키나 middleware를 추가하려면 직접 확장을 구현해야한다.</li><li>HTTP error(4XX, 5XX)상태에 대해 reject하지 않는다(await catch가 불가능)</li><li>Cache API를 이용한 캐싱을 지원한다.</li><li>요청에 대한 취소가 불가능하다(이 역시 별도 구현은 가능)</li></ul><p>최근 PWA에 많은 관심을 갖고 있어 시간이 되면 써 보고 싶다.</p>',5),d={render:function(e,t){return i}}}}]);