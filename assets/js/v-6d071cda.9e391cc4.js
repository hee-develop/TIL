(self.webpackChunk=self.webpackChunk||[]).push([[9309],{1072:(e,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>s});const s={key:"v-6d071cda",path:"/_draft/Javascript/Function.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Date: 2021-03-27",slug:"date-2021-03-27",children:[]},{level:2,title:"Function",slug:"function",children:[{level:3,title:"매개 변수",slug:"매개-변수",children:[]},{level:3,title:"this",slug:"this",children:[]},{level:3,title:"화살표 함수",slug:"화살표-함수",children:[]},{level:3,title:"참고 링크",slug:"참고-링크",children:[]}]}],filePathRelative:"_draft/Javascript/Function.md",git:{updatedTime:null,contributors:[]}}},6657:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});const s=(0,a(6252).uE)('<h2 id="date-2021-03-27" tabindex="-1"><a class="header-anchor" href="#date-2021-03-27" aria-hidden="true">#</a> Date: 2021-03-27</h2><h2 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h2><h3 id="매개-변수" tabindex="-1"><a class="header-anchor" href="#매개-변수" aria-hidden="true">#</a> 매개 변수</h3><p>자바스크립트는 매개 변수를 느슨하게 체크하므로, 갯수가 부족하거나 많을 때 에러를 발생시키지 않는다. 많으면 버려지고, 부족한 값은 <code>undefined</code>이 된다.</p><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h3><p>기본적인 자바스크립트 함수는, 실행(호출)될 때 <code>this</code>의 값이 다음과 같이 결정된다.</p><ul><li>생성자인 경우엔 새로운 객체</li><li>객체 메서드인 경우엔 객체</li></ul><p>이는 혼란을 유발하기 쉬우며, 이를 대체하기 위해 화살표 함수(익명)를 사용해 실행될 때가 아닌 정의될 때 <code>this</code>의 값이 고정되도록 할 수 있다.</p><h3 id="화살표-함수" tabindex="-1"><a class="header-anchor" href="#화살표-함수" aria-hidden="true">#</a> 화살표 함수</h3><p>화살표 함수는 <code>=&gt;</code>를 이용해 정의된 함수를 말하며, 대괄호를 생략한 한 줄의 표현식은 표현식의 평가값이 반환값이 된다. 대괄호를 사용하면 <code>return</code>을 사용해야 반환값을 지정할 수 있다.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getHi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;hi!&#39;</span><span class="token punctuation">;</span> <span class="token comment">// getHi()는 &#39;hi!&#39;를 반환함</span>\n<span class="token keyword">const</span> <span class="token function-variable function">getHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;hello!&#39;</span><span class="token punctuation">;</span> <span class="token comment">// return을 지정하지 않았으므로, getHello()는 undefined를 반환함</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>이외에 일반 함수(<code>function</code>)와의 차이점은 다음과 같다.</p><ul><li>화살표 함수는 항상 익명이다. 다만 ES6 이상을 지원하는 브라우저는 구문 분석을 통해 이름을 유추할 수 있다.</li><li>화살표 함수는 해당 함수가 정의되는 시점에서, 함수를 둘러싼 문맥(lexical scope)의 <code>this</code>값을 <code>this</code>로 갖는다. <ul><li>일반적인 함수와 달리 <code>bind</code>등으로 <code>this</code>의 값을 변경할 수 없다.</li><li>현재 범위에 <code>this</code>값이 없다면 상위 범위를 참조한다.</li></ul></li><li>생성자로 사용할 수 없다. 즉 <code>new</code>를 붙일 수 없고 <code>super</code>의 사용도 불가하다.</li><li><code>prototype</code>속성이 없다.</li><li><code>yield</code>로 중단시킬 수 없다.</li></ul><p>화살표 함수 표현은 메소드가 아닌 곳에 가장 적합하다.</p><h3 id="참고-링크" tabindex="-1"><a class="header-anchor" href="#참고-링크" aria-hidden="true">#</a> 참고 링크</h3><p>https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions</p>',16),t={render:function(e,n){return s}}}}]);