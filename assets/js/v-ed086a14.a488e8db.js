(self.webpackChunk=self.webpackChunk||[]).push([[4450],{9016:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-ed086a14",path:"/_draft/Typescript/03%20-%20Typescript%20basic3.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Date: 2021-02-22",slug:"date-2021-02-22",children:[]},{level:2,title:"Typescript 기초3",slug:"typescript-기초3",children:[{level:3,title:"함수의 타이핑",slug:"함수의-타이핑",children:[]},{level:3,title:"선택적 매개변수와 기본 매개변수",slug:"선택적-매개변수와-기본-매개변수",children:[]},{level:3,title:"나머지 매개변수",slug:"나머지-매개변수",children:[]},{level:3,title:"this 매개변수",slug:"this-매개변수",children:[]},{level:3,title:"타입 시스템에서의 다른 결과값을 반환하기",slug:"타입-시스템에서의-다른-결과값을-반환하기",children:[]}]}],filePathRelative:"_draft/Typescript/03 - Typescript basic3.md",git:{updatedTime:null,contributors:[]}}},1436:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>r});var t=a(6252);const p=(0,t.Wm)("h2",{id:"date-2021-02-22",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#date-2021-02-22","aria-hidden":"true"},"#"),(0,t.Uk)(" Date: 2021-02-22")],-1),e=(0,t.Wm)("h2",{id:"typescript-기초3",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#typescript-기초3","aria-hidden":"true"},"#"),(0,t.Uk)(" Typescript 기초3")],-1),o=(0,t.Uk)("from "),c={href:"https://typescript-kr.github.io/",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("Typescript-kr"),i=(0,t.uE)('<h3 id="함수의-타이핑" tabindex="-1"><a class="header-anchor" href="#함수의-타이핑" aria-hidden="true">#</a> 함수의 타이핑</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 변수의 타입 선언</span>\n<span class="token keyword">let</span> <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// number을 return</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>반환값 명시 가능. 반환값은 TS가 파악이 가능하므로 생략 가능</li><li>변수와 함수를 동시에 타입 선언할 필요는 없음(컴파일러 추론)</li></ul><h3 id="선택적-매개변수와-기본-매개변수" tabindex="-1"><a class="header-anchor" href="#선택적-매개변수와-기본-매개변수" aria-hidden="true">#</a> 선택적 매개변수와 기본 매개변수</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;hee&#39;</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>선택적, 혹은 기본 매개변수를 무조건 뒤로 미룰 필요는 없음</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName <span class="token operator">=</span> <span class="token string">&quot;Will&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">&quot;Adams&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Will Adams</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="나머지-매개변수" tabindex="-1"><a class="header-anchor" href="#나머지-매개변수" aria-hidden="true">#</a> 나머지 매개변수</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>y<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="this-매개변수" tabindex="-1"><a class="header-anchor" href="#this-매개변수" aria-hidden="true">#</a> this 매개변수</h3><p>매개변수로 <code>this: ??</code>를 넣어주는 것으로 <code>this</code>의 타입을 지정할 수 있음</p><h3 id="타입-시스템에서의-다른-결과값을-반환하기" tabindex="-1"><a class="header-anchor" href="#타입-시스템에서의-다른-결과값을-반환하기" aria-hidden="true">#</a> 타입 시스템에서의 다른 결과값을 반환하기</h3><p>정적 언어에서 상황에 따라 여러 타입의 값을 반환하는 것은 불가능 여러 타입을 반환할 필요가 있다면 오버로드를 해서 구현</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token punctuation">{</span>suit<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> card<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>suit<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> card<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>예제에선 <code>Array&lt;object&gt;</code>타입을 인자로 받으면 <code>number</code>를 반환하고, <code>number</code>타입을 인자로 받으면 <code>object</code>타입을 반환함 <code>pickCard(x): any</code>는 오버로드 대상이 아님. 즉 언급되지 않은 타입으로 대상을 부르면 오류 발생</p>',15),r={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[p,e,(0,t.Wm)("p",null,[o,(0,t.Wm)("a",c,[l,(0,t.Wm)(a)])]),i],64)}}}}]);