(self.webpackChunk=self.webpackChunk||[]).push([[6016],{6608:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-7b9d0d1a",path:"/ko/frontend/react-function-component-destruction.html",title:"React의 Function Component에서 Destruction하기",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[],filePathRelative:"ko/frontend/react-function-component-destruction.md",git:{updatedTime:1629537148e3,contributors:[]}}},5148:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="react의-function-component에서-destruction하기" tabindex="-1"><a class="header-anchor" href="#react의-function-component에서-destruction하기" aria-hidden="true">#</a> React의 Function Component에서 Destruction하기</h1><p><code>Written: 2021-08-18</code></p><p>Class Component는 소멸자 메소드가 따로 제공되지만 Function Component는 그렇지 못하다.</p><p>그러나 hook를 이용하면 구현할 수 있다.</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 소멸자 */</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>예를 들어, 어떠한 컴포넌트에서 키보드 입력에 대한 리스너를 걸었을 때, 해당 컴포넌트가 없어지면 리스너도 끊어 두어야 할 필요가 있다.</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useGlobalKeyDownEvent <span class="token operator">=</span> <span class="token punctuation">(</span>keyDownListener<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Window<span class="token punctuation">,</span> ev<span class="token operator">:</span> KeyboardEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyDownListener<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> keyDownListener<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> keyDownListener<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>keyDownListener<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>이런 식으로 만들어 두면, 이벤트를 걸어두었던 컴포넌트가 없어질 때 아래의 <code>() =&gt; window.removeEventListener</code> 가 동작하게 된다.</p>',8),p={render:function(n,s){return t}}}}]);