(self.webpackChunk=self.webpackChunk||[]).push([[935],{4968:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-1360e374",path:"/_draft/Typescript/04%20-%20Typescript%20basic4.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Date: 2021-02-24",slug:"date-2021-02-24",children:[]},{level:2,title:"Typescript 기초4",slug:"typescript-기초4",children:[{level:3,title:"리터럴 타입 좁히기(Literal Narrowing)",slug:"리터럴-타입-좁히기-literal-narrowing",children:[]},{level:3,title:"리터럴 타입",slug:"리터럴-타입",children:[]},{level:3,title:"유니언 타입",slug:"유니언-타입",children:[]},{level:3,title:"유니언 구별하기",slug:"유니언-구별하기",children:[]},{level:3,title:"교차 타입",slug:"교차-타입",children:[]}]}],filePathRelative:"_draft/Typescript/04 - Typescript basic4.md",git:{updatedTime:null,contributors:[]}}},6631:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>i});var p=a(6252);const t=(0,p.Wm)("h2",{id:"date-2021-02-24",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#date-2021-02-24","aria-hidden":"true"},"#"),(0,p.Uk)(" Date: 2021-02-24")],-1),e=(0,p.Wm)("h2",{id:"typescript-기초4",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#typescript-기초4","aria-hidden":"true"},"#"),(0,p.Uk)(" Typescript 기초4")],-1),o=(0,p.Uk)("from "),c={href:"https://typescript-kr.github.io/",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("Typescript-kr"),r=(0,p.uE)('<h3 id="리터럴-타입-좁히기-literal-narrowing" tabindex="-1"><a class="header-anchor" href="#리터럴-타입-좁히기-literal-narrowing" aria-hidden="true">#</a> 리터럴 타입 좁히기(Literal Narrowing)</h3><p>무한한 수의 잠재적 케이스들을 유한한 수의 잠재적 케이스로 줄여나가는 것을 의미 예: <code>const hello = &#39;hello&#39;;</code>는 <code>&#39;hello&#39;</code>라는 값으로 고정(1개의 유한한 케이스)됨</p><h3 id="리터럴-타입" tabindex="-1"><a class="header-anchor" href="#리터럴-타입" aria-hidden="true">#</a> 리터럴 타입</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Easing</span> <span class="token operator">=</span> <span class="token string">&#39;ease-in&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;ease-out&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;ease-in-out&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">rollDice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>type은 갑자기 어디서 나오신건가요....</p><h3 id="유니언-타입" tabindex="-1"><a class="header-anchor" href="#유니언-타입" aria-hidden="true">#</a> 유니언 타입</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">padLeft</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>\n  <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>\n  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">getSmallPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Fish <span class="token operator">|</span> Bird<span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token function">getSmallPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npet<span class="token punctuation">.</span><span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 오류</span>\npet<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><code>pet</code>은 아직 타입이 정해지지 않았으므로, 공통되지 않은 프로퍼티를 실행시키는 것은 불가능함</p><h3 id="유니언-구별하기" tabindex="-1"><a class="header-anchor" href="#유니언-구별하기" aria-hidden="true">#</a> 유니언 구별하기</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">NetworkLoadingState</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  state<span class="token operator">:</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">NetworkFailedState</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  state<span class="token operator">:</span> <span class="token string">&#39;failed&#39;</span><span class="token punctuation">;</span>\n  code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">NetworkSuccessState</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  state<span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">;</span>\n  response<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    duration<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    summary<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">NetworkState</span> <span class="token operator">=</span>\n  <span class="token operator">|</span> NetworkLoadingState\n  <span class="token operator">|</span> NetworkFailedState\n  <span class="token operator">|</span> NetworkSuccessState<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">networkStatus</span><span class="token punctuation">(</span>state<span class="token operator">:</span> NetworkState<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;loading&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;Downloading...&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;failed&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> downloading</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;success&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Downloaded </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token punctuation">.</span>response<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token punctuation">.</span>response<span class="token punctuation">.</span>summary<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="교차-타입" tabindex="-1"><a class="header-anchor" href="#교차-타입" aria-hidden="true">#</a> 교차 타입</h3><p>유니언과 달리, 말 그대로 둘을 결합한 타입</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ErrorHandling</span> <span class="token punctuation">{</span>\n  success<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  error<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ArtworksData</span> <span class="token punctuation">{</span>\n  artworks<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">ArtworksResponse</span> <span class="token operator">=</span> ArtworksData <span class="token operator">&amp;</span> ErrorHandling<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',13),i={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,e,(0,p.Wm)("p",null,[o,(0,p.Wm)("a",c,[l,(0,p.Wm)(a)])]),r],64)}}}}]);