(self.webpackChunk=self.webpackChunk||[]).push([[9236],{387:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-272b1470",path:"/_draft/Typescript/06%20-%20Typescript%20basic6.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Date: 2021-02-27",slug:"date-2021-02-27",children:[]},{level:2,title:"Typescript 기초6",slug:"typescript-기초6",children:[{level:3,title:"Enums",slug:"enums",children:[]},{level:3,title:"런타임에서 열거형",slug:"런타임에서-열거형",children:[]},{level:3,title:"컴파일 시점에서 열거형",slug:"컴파일-시점에서-열거형",children:[]},{level:3,title:"const 열거형",slug:"const-열거형",children:[]},{level:3,title:"Ambient 열거형",slug:"ambient-열거형",children:[]}]}],filePathRelative:"_draft/Typescript/06 - Typescript basic6.md",git:{updatedTime:null,contributors:[]}}},9421:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>i});var e=a(6252);const p=(0,e.Wm)("h2",{id:"date-2021-02-27",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#date-2021-02-27","aria-hidden":"true"},"#"),(0,e.Uk)(" Date: 2021-02-27")],-1),t=(0,e.Wm)("h2",{id:"typescript-기초6",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#typescript-기초6","aria-hidden":"true"},"#"),(0,e.Uk)(" Typescript 기초6")],-1),c=(0,e.Uk)("from "),l={href:"https://typescript-kr.github.io/",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("Typescript-kr"),r=(0,e.uE)('<h3 id="enums" tabindex="-1"><a class="header-anchor" href="#enums" aria-hidden="true">#</a> Enums</h3><p>C의 그것</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>\n  Up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  Down<span class="token punctuation">,</span> <span class="token comment">// = 2</span>\n  Left<span class="token punctuation">,</span>\n  Right<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>\n  Up<span class="token punctuation">,</span> <span class="token comment">// = 0</span>\n  Down<span class="token punctuation">,</span> <span class="token comment">// = 1</span>\n  Left<span class="token punctuation">,</span>\n  Right<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 문자열 열거형은 초기화가 필요함</span>\n<span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>\n  Up <span class="token operator">=</span> <span class="token string">&#39;up&#39;</span><span class="token punctuation">,</span>\n  Down <span class="token operator">=</span> <span class="token string">&#39;down&#39;</span><span class="token punctuation">,</span>\n  Left <span class="token operator">=</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span>\n  Right <span class="token operator">=</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>열거형은 숫자와 문자를 섞어 사용할 수 있으나, 권장하지 않음</li><li>열거형의 초기화는 계산된 값이 입력됨. 런타임 시점에 초기화는 불가능</li></ul><h3 id="런타임에서-열거형" tabindex="-1"><a class="header-anchor" href="#런타임에서-열거형" aria-hidden="true">#</a> 런타임에서 열거형</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> <span class="token constant">E</span><span class="token punctuation">{</span>\n  <span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token punctuation">,</span> <span class="token constant">Z</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>obj<span class="token punctuation">;</span> <span class="token punctuation">{</span><span class="token constant">X</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>E는 실존 객체(object)이며, E.X는 0이라는 값이 할당되어 있기 때문에 문제 없이 동작한다.</p><h3 id="컴파일-시점에서-열거형" tabindex="-1"><a class="header-anchor" href="#컴파일-시점에서-열거형" aria-hidden="true">#</a> 컴파일 시점에서 열거형</h3><p><code>keyof typeof</code>를 사용하면 컴파일 시점에 열거형의 키를 문자열로 나타내는 타입으로 가져올 수 있다.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> LogLevel <span class="token punctuation">{</span>\n  <span class="token constant">ERROR</span><span class="token punctuation">,</span> <span class="token constant">WARN</span><span class="token punctuation">,</span> <span class="token constant">INFO</span><span class="token punctuation">,</span> <span class="token constant">DEBUG</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * type LogLevelStrings = &#39;ERROR&#39; | &#39;WARN&#39; | &#39;INFO&#39; | &#39;DEBUG&#39;;\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">LogLevelStrings</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> LogLevel<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="const-열거형" tabindex="-1"><a class="header-anchor" href="#const-열거형" aria-hidden="true">#</a> const 열거형</h3><ul><li>일반적인 열거형은 객체로 선언되므로, 불필요한 참조 비용을 제거하려면 <code>const enum</code>을 사용</li><li><code>const enum</code>은 컴파일 시 값이 직접적으로 들어감</li><li>상수형 enum만 사용 가능</li></ul><h3 id="ambient-열거형" tabindex="-1"><a class="header-anchor" href="#ambient-열거형" aria-hidden="true">#</a> Ambient 열거형</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">enum</span> Enum <span class="token punctuation">{</span>\n  <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token constant">B</span><span class="token punctuation">,</span>\n  <span class="token constant">C</span> <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>일반 열거형은 초기화되지 않은 멤버가 상수로 간주하는 멤버 뒤에 있을 때, 해당 멤버(B)도 상수로 간주. Ambient열거형은 초기화되지 않은 멤버는 항상 계산된 멤버로 간주.</p>',15),i={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,t,(0,e.Wm)("p",null,[c,(0,e.Wm)("a",l,[o,(0,e.Wm)(a)])]),r],64)}}}}]);