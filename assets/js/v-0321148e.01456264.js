(self.webpackChunk=self.webpackChunk||[]).push([[2980],{492:(e,s,n)=>{"use strict";n.r(s),n.d(s,{data:()=>a});const a={key:"v-0321148e",path:"/ko/typescript/keyof-typeof.html",title:"객체의 키를 타입으로 선언하기 : keyof typeof",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[{level:3,title:"어떻게 동작하는 걸까?",slug:"어떻게-동작하는-걸까",children:[]},{level:3,title:"참조",slug:"참조",children:[]}],filePathRelative:"ko/typescript/keyof-typeof.md",git:{updatedTime:1625410562e3,contributors:[{name:"hee-develop",email:"hee950320@yahoo.co.jp",commits:1}]}}},148:(e,s,n)=>{"use strict";n.r(s),n.d(s,{default:()=>o});const a=(0,n(6252).uE)('<h1 id="객체의-키를-타입으로-선언하기-keyof-typeof" tabindex="-1"><a class="header-anchor" href="#객체의-키를-타입으로-선언하기-keyof-typeof" aria-hidden="true">#</a> 객체의 키를 타입으로 선언하기 : keyof typeof</h1><p><code>Written: 2021-07-04</code></p><p>오브젝트의 키를 타입으로 지정하고 싶을 땐 <code>keyof typeof</code> 키워드를 사용하면 된다.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  key1<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  key2<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>\n<span class="token comment">// key가 가질 수 있는 값은 `key1`과 `key2`로 제한됨</span>\n\n<span class="token keyword">const</span> value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// obj의 key를 값으로 갖고 있으므로 `any`에 관련된 경고가 출력되지 않음</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="어떻게-동작하는-걸까" tabindex="-1"><a class="header-anchor" href="#어떻게-동작하는-걸까" aria-hidden="true">#</a> 어떻게 동작하는 걸까?</h3><p>자바스크립트의 <code>typeof</code> 키워드는 대상 객체의 타입을 반환한다. 즉, <code>typeof obj</code>의 값은 <code>&#39;object&#39;</code>이다. 그럼 <code>keyof &#39;object&#39;</code>가 되는 셈인데 이게 왜 움직이는걸까?</p><p>답은 타입스크립트의 <code>typeof</code>는 자바스크립트 그것과 동작이 조금 다르기 때문이다. 타입스크립트의 <code>typeof</code> 키워드는 두 가지 방법으로 사용할 수 있다.</p><ol><li>런타임에서 사용 런타임에서 사용하면 자바스크립트와 같은 동작을 보여준다. 즉 <code>typeof obj</code>는 <code>&#39;object&#39;</code>를 반환한다.<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span> <span class="token comment">// == (a = &#39;object&#39;)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>타입 추론에서 사용 두 번쨰는 타입 추론에서 사용하는 방법이다. 위 예제에서 사용된 <code>typeof</code>는 런타임 키워드가 아니고 컴파일 시에 추론되는 <code>type</code>을 반환하도록 되어 있다. 즉 예제의 <code>typeof obj</code>는 <code>&#39;object&#39;</code>를 반환하는 것이 아니고 <code>obj</code>의 타입을 반환하게 된다.<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span> <span class="token comment">// == { key1: number, key2: number }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>1번에서는 <code>const</code>에 값을 넣었지만 2번에서는 <code>type</code>에 값을 대입하고 있는 것을 볼 수 있다.</li></ol><p>타입 선언은 타입스크립트의 문법으로, 말 그대로 타입을 선언하는 것일 뿐이다. 따라서 트랜스컴파일 시에는 사라지는 값이며, 때문에 런타임 중에 수정할 수 없다. 즉 런타임 도중에 수정되는 키를 타입으로 선언하는 행위는 불가능하다.</p><p>쓰면서 조금씩 익혀가고 있는데 역시 탄탄하게 다지고 난 뒤에 쓰는 게 이해가 더 잘 될 것 같다. TS는 정적 언어와 동적 언어의 장점을 모두 가진 매력적인 언어라고 생각한다. 일이 좀 진정되면 천천히 공부해 보고 싶다.</p><h3 id="참조" tabindex="-1"><a class="header-anchor" href="#참조" aria-hidden="true">#</a> 참조</h3><p>https://www.typescriptlang.org/docs/handbook/2/typeof-types.html</p>',12),o={render:function(e,s){return a}}}}]);