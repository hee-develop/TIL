(self.webpackChunk=self.webpackChunk||[]).push([[9248],{6415:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-6547278e",path:"/ko/javascript/catch-global-error.html",title:"모든 런타임 에러 캐치하기",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[{level:3,title:"주의할 점",slug:"주의할-점",children:[]},{level:3,title:"참고 링크",slug:"참고-링크",children:[]}],filePathRelative:"ko/javascript/catch-global-error.md",git:{updatedTime:1628002356e3,contributors:[]}}},2029:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="모든-런타임-에러-캐치하기" tabindex="-1"><a class="header-anchor" href="#모든-런타임-에러-캐치하기" aria-hidden="true">#</a> 모든 런타임 에러 캐치하기</h1><p><code>Written: 2021-03-13</code></p><p>브라우저에서 던져지는 에러는 런타임에서 <code>catch</code>한다. 이 에러는 <code>window</code>객체에 이벤트 리스너를 추가하는 것으로 다룰 수 있다.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>브라우저의 콘솔에 직접 입력하는 것으로도 바로 확인할 수 있는데, 한 가지 주의해야 할 것이 있다.<br> 브라우저의 콘솔에서 발생하는 에러는 <code>window</code>에 던져지지 않고 콘솔 내부에서 처리되기 때문에, 아래와 같이 동기적인 코드를 작성하면 <code>onerror</code> 이벤트는 발생하지 않는다.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;hi!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>이를 동작시키려면 비동기(이벤트 큐 / 마이크로태스크 큐)로 에러를 던져 주면 된다.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;hi!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="주의할-점" tabindex="-1"><a class="header-anchor" href="#주의할-점" aria-hidden="true">#</a> 주의할 점</h3><p>당연한 얘기겠지만, 누군가 에러를 처리했다면(<code>try-catch</code>), 해당 에러는 런타임에게 던져지지 않고 소멸된다.<br> 별 것 아닌 것 같지만 Sentry같은 에러 수집 도구가 등록이 되어 있다면 에러 수집이 불가능하므로 주의가 필요하다.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;hi!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 여기서 에러가 소멸됨</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>이는 다시 <code>throw</code>하는 방법으로 쉽게 해결이 가능하다(에러 처리를 두 번 하는 셈이 되어 버리지만..).</p><h3 id="참고-링크" tabindex="-1"><a class="header-anchor" href="#참고-링크" aria-hidden="true">#</a> 참고 링크</h3><p>https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror https://qiita.com/att55/items/4486f8cadb339d9b03f1</p>',14),t={render:function(n,s){return p}}}}]);