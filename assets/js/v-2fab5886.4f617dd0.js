(self.webpackChunk=self.webpackChunk||[]).push([[622],{8931:(e,t,a)=>{"use strict";a.r(t),a.d(t,{data:()=>r});const r={key:"v-2fab5886",path:"/ko/development-theory/boilerplate.html",title:"Boilerplate",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[{level:3,title:"반복적으로 사용되는 코드",slug:"반복적으로-사용되는-코드",children:[]},{level:3,title:"변경 없이 계속하여 재사용할 수 있는 저작품",slug:"변경-없이-계속하여-재사용할-수-있는-저작품",children:[]}],filePathRelative:"ko/development-theory/boilerplate.md",git:{updatedTime:1629537148e3,contributors:[]}}},9201:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>l});const r=(0,a(6252).uE)('<h1 id="boilerplate" tabindex="-1"><a class="header-anchor" href="#boilerplate" aria-hidden="true">#</a> Boilerplate</h1><p><code>Written: 2021-08-11</code></p><p>Boilerplate는 번역하면 &#39;상용구&#39;의 의미가 있다. 상용구란 자주 사용하는 문장이나 수식, 명령어 등을 저장해 두었다가, 필요할 때에 불러내어 쓰는 것을 말한다. 프로그래밍에서의 &#39;상용구 코드&#39;도 비슷한 의미가 있는데, 용어의 사용법에 따라 비슷하면서도 의미가 약간 다르다.</p><h3 id="반복적으로-사용되는-코드" tabindex="-1"><a class="header-anchor" href="#반복적으로-사용되는-코드" aria-hidden="true">#</a> 반복적으로 사용되는 코드</h3><p>OOP의 getter/setter와 같이, 반복적으로 사용해야 하는 코드를 지칭한다.</p><p>소프트웨어 개발 원리에서 말하는 WET(DRY의 반대)한 코드와는 의미가 조금 다르다. WET한 코드는 반복되는 부분을 함수로 만든다든가 하는 방법으로 DRY하게 만들 수 있지만, 보일러플레이트 코드는 생략이 어렵다. (OOP의 private property에서 get/set 없이는 데이터에 접근/수정할 수 없으므로)</p><p>이 단어는 형용사적 표현도 가능한데, 이를테면 너무 형식적인 문서를 봤을 때 &#39;보일러플레이트한 문서&#39;라고 사용할 수 있다.</p><h3 id="변경-없이-계속하여-재사용할-수-있는-저작품" tabindex="-1"><a class="header-anchor" href="#변경-없이-계속하여-재사용할-수-있는-저작품" aria-hidden="true">#</a> 변경 없이 계속하여 재사용할 수 있는 저작품</h3><p>위에서 필연적으로 사용해야 하는 코드들을 미리 준비해 둔 것을 말한다. 미리 준비해 두었다는 점에서 템플릿과 비슷하지만, 보일러플레이트는 그 자체로 하나의 저작품이므로 그대로 사용할 수 있다는 차이점이 존재한다.</p><p>웹 개발에서의 Packer, Linter, Package Manager등의 설정이 미리 되어 있는 것이 그 예이다(react의 create-react-app과 같은 것).</p>',10),l={render:function(e,t){return r}}}}]);