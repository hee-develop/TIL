(self.webpackChunk=self.webpackChunk||[]).push([[4208],{3656:(e,s,n)=>{"use strict";n.r(s),n.d(s,{data:()=>a});const a={key:"v-2b994dd2",path:"/jp/typescript/keyof-typeof.html",title:"オブジェクトのキーをタイプとして宣言する : keyof typeof",lang:"ja-JP",frontmatter:{},excerpt:"",headers:[{level:3,title:"なぜ動くの？",slug:"なぜ動くの",children:[]},{level:3,title:"Reference",slug:"reference",children:[]}],filePathRelative:"jp/typescript/keyof-typeof.md",git:{updatedTime:1628030041e3,contributors:[]}}},4051:(e,s,n)=>{"use strict";n.r(s),n.d(s,{default:()=>p});const a=(0,n(6252).uE)('<h1 id="オブジェクトのキーをタイプとして宣言する-keyof-typeof" tabindex="-1"><a class="header-anchor" href="#オブジェクトのキーをタイプとして宣言する-keyof-typeof" aria-hidden="true">#</a> オブジェクトのキーをタイプとして宣言する : keyof typeof</h1><p><code>Written: 2021-07-04</code></p><p>オブジェクトのキーをタイプとして使いたい場合は、<code>keyof typeof</code>を使うと良い。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  key1<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  key2<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>\n<span class="token comment">// keyが持てるのは`key1`と`key2`のみ</span>\n\n<span class="token keyword">const</span> value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// objのkeyを値として持っているため、タイプエラー(`any`)がでない</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="なぜ動くの" tabindex="-1"><a class="header-anchor" href="#なぜ動くの" aria-hidden="true">#</a> なぜ動くの？</h3><p>javascriptでは<code>typeof obj</code>は<code>&#39;object&#39;</code>を返す。では、これは<code>keyof &#39;object&#39;</code>と同じことになるはずだが、なぜ動くのだろう？</p><p>答えは、これはタイプ宣言で使われているからだった。TSの<code>typeof</code>はJSのあれとは挙動が少し異なる。TSの<code>typeof</code>は２つの使い方がある。</p><ol><li>runtimeに使う こうするとJSと同じ挙動になる。つまり<code>typeof obj</code>は<code>&#39;object&#39;</code>を返す。<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span> <span class="token comment">// == (a = &#39;object&#39;)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>タイプ宣言に使う タイプを宣言する時に<code>typeof</code>を使うと、対象の本当のタイプを返す。上記の<code>typeof</code>は、よく見るとタイプを宣言するときに使われている。つまり、例の<code>typeof obj</code>は<code>obj</code>のタイプを返す。<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span> <span class="token comment">// == { key1: number, key2: number }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>１番では<code>const</code>に値を入れているが、２番は<code>type</code>に値を入れている。</li></ol><p>タイプ宣言はTSの文法で、文字通りタイプについて述べるだけ。だからトランスコンパイルの際には無くなるもので、ランタイムの際に修正できない値である。こういうことでランタイムの途中足されたりするキーをタイプとして宣言することは不可能だ。</p><p>業務で使いながら習っている感じだけど、やはり基礎からしっかり勉強しておいた方が効率よく使えそうな気がする。TSは静的言語と動的言語の良い点を持っている魅力的な言語だと思う。落ち着いたらゆっくり勉強してみたい。</p><h3 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h3><p>https://www.typescriptlang.org/docs/handbook/2/typeof-types.html</p>',12),p={render:function(e,s){return a}}}}]);