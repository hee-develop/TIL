(self.webpackChunk=self.webpackChunk||[]).push([[4922],{3937:(n,s,e)=>{"use strict";e.r(s),e.d(s,{data:()=>a});const a={key:"v-c706d544",path:"/ko/frontend/add-eslint-and-prettier-quickly.html",title:"eslint와 prettier 빠르게 적용하기",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[{level:2,title:"eslint 설치",slug:"eslint-설치",children:[]},{level:2,title:"eslint 간단 설정",slug:"eslint-간단-설정",children:[]},{level:2,title:"prettier 설치",slug:"prettier-설치",children:[{level:3,title:"VSCode에서 저장할 때 자동으로 prettier가 적용되게 수정",slug:"vscode에서-저장할-때-자동으로-prettier가-적용되게-수정",children:[]}]}],filePathRelative:"ko/frontend/add-eslint-and-prettier-quickly.md",git:{updatedTime:1628002356e3,contributors:[]}}},9802:(n,s,e)=>{"use strict";e.r(s),e.d(s,{default:()=>t});const a=(0,e(6252).uE)('<h1 id="eslint와-prettier-빠르게-적용하기" tabindex="-1"><a class="header-anchor" href="#eslint와-prettier-빠르게-적용하기" aria-hidden="true">#</a> eslint와 prettier 빠르게 적용하기</h1><p><code>Written: 2021-07-23</code></p><h2 id="eslint-설치" tabindex="-1"><a class="header-anchor" href="#eslint-설치" aria-hidden="true">#</a> eslint 설치</h2><p><code>npx</code>를 이용하면 빠르게 설정할 수 있다.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>% npx eslint --init\n✔ How would you like to use ESLint? problems\n✔ What type of modules does your project use? esm\n✔ Which framework does your project use? react\n✔ Does your project use TypeScript? Yes\n✔ Where does your code run? browser\n✔ What format do you want your config file to be in? JavaScript\nLocal ESLint installation not found.\nThe config that you&#39;ve selected requires the following dependencies:\n\neslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest eslint@latest\n✔ Would you like to install them now with npm? Yes\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>React 프로젝트에 넣을 예정이었고, ESModule(<code>require</code>대신 <code>import</code>)과 브라우저에서만 돌릴 것이라는 것, 그리고 <code>.eslintrc.js</code> 파일로 출력하게끔 설정했다.</p><h2 id="eslint-간단-설정" tabindex="-1"><a class="header-anchor" href="#eslint-간단-설정" aria-hidden="true">#</a> eslint 간단 설정</h2><p>위 명령을 실행하는 것만으로 eslint의 설정은 끝이다. eslint의 권장 설정이 자동으로 설정되어 있어 그대로 사용해도 괜찮다. 근데 기본 설정에서 <code>.eslintrc.js</code>파일도 린터의 대상이 되어 버려 <code>module.exports</code>에서 경고가 뜨므로 무시해 줄 필요가 있다. 무시하는 방법은 <code>eslintrc</code>에 <code>ignorePatterns</code>로 설정하는 방법과, <code>.eslintignore</code>파일을 작성하는 방법이 있다. 아직 무시할 내용이 많지 않으므로 <code>ignorePatterns</code>로 작성한다.</p><p>설정 파일은 보통 최상위 경로에 <code>*.js</code> 형식으로 저장되므로, <code>/*.js</code>라고 적어 두면 최상위 경로의 설정 파일만 무시할 수 있다. 무시 패턴은 알아보기 쉽게 규칙(<code>rules</code>) 위에 작성하면 좋다.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>modules<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n\n  <span class="token string">&#39;ignorePatterns&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;/*.js&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;rules&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="prettier-설치" tabindex="-1"><a class="header-anchor" href="#prettier-설치" aria-hidden="true">#</a> prettier 설치</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm i -D prettier\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>그리고 최상위 경로에 <code>.prettierrc</code> 파일을 만든 뒤, 간단한 설정을 해 둔다.</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;endOfLine&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lf&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>eslint</code>와 달리 무시 설정은 다른 파일로밖에 설정이 안 되는 것 같다. <code>.prettierignore</code> 파일을 만들고 다음을 입력한다.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/*.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>eslint</code>때와 마찬가지로 최상위 경로의 설정 파일은 적용하지 않도록 하였다.</p><h3 id="vscode에서-저장할-때-자동으로-prettier가-적용되게-수정" tabindex="-1"><a class="header-anchor" href="#vscode에서-저장할-때-자동으로-prettier가-적용되게-수정" aria-hidden="true">#</a> VSCode에서 저장할 때 자동으로 prettier가 적용되게 수정</h3><p><code>cmd + shift + P</code>(윈도우라면 cmd 대신 alt?)를 누르고 <code>Preferences: Open Workspace Settings (JSON)</code>을 선택. 자동으로 <code>settings.json</code> 파일이 생성된다.</p><p>다음과 같이 입력한다.</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;editor.defaultFormatter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esbenp.prettier-vscode&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;editor.formatOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>이제 VSCode에서 저장할 때마다 prettier가 자동 적용되는 것을 확인할 수 있다.</p>',22),t={render:function(n,s){return a}}}}]);