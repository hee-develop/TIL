(self.webpackChunk=self.webpackChunk||[]).push([[7699],{2284:(e,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>t});const t={key:"v-7340d80e",path:"/ko/etc/use-gh-pages.html",title:".gitignore 대상 폴더를 gh-pages를 이용해 배포하기",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[{level:3,title:"git subtree를 이용한 배포",slug:"git-subtree를-이용한-배포",children:[]},{level:3,title:"gh-pages를 이용한 배포",slug:"gh-pages를-이용한-배포",children:[]},{level:3,title:"이미 브랜치가 있다며 배포가 안될 때",slug:"이미-브랜치가-있다며-배포가-안될-때",children:[]}],filePathRelative:"ko/etc/use-gh-pages.md",git:{updatedTime:1629537148e3,contributors:[]}}},4956:(e,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>u});var t=s(6252);const n=(0,t.uE)('<h1 id="gitignore-대상-폴더를-gh-pages를-이용해-배포하기" tabindex="-1"><a class="header-anchor" href="#gitignore-대상-폴더를-gh-pages를-이용해-배포하기" aria-hidden="true">#</a> .gitignore 대상 폴더를 gh-pages를 이용해 배포하기</h1><p><code>Written: 2021-07-02</code></p><h3 id="git-subtree를-이용한-배포" tabindex="-1"><a class="header-anchor" href="#git-subtree를-이용한-배포" aria-hidden="true">#</a> git subtree를 이용한 배포</h3><p>이전까지는 Github pages에 배포할 때 컴파일 된 파일들(보통 <code>/dist</code>나 <code>/build</code>등)을 git에서 추적하게 한 뒤, subtree를 이용해 배포했었다.<br> subtree를 이용하면 해당 subtree는 정적 파일만 볼 수 있게 되므로 깔끔하게 github page를 적용할 수 있다.</p><p>다만 subtree의 대상은 결국 브랜치에는 남아 있게 된다. 그대로 두어도 별 문제는 없지만 되도록 완벽하게 나누고 싶었기 때문에 <code>.gitignore</code>를 이용해 컴파일된 파일들을 제외시켜 보았다.<br> 당연하게도 git에서 제외되었기 떄문에 subtree가 해당 파일을 찾을 수 없게 되었고.. 아래와 같은 에러가 발생했다.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>% <span class="token function">git</span> subtree push --prefix build/ origin main\nNo new revisions were found\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gh-pages를-이용한-배포" tabindex="-1"><a class="header-anchor" href="#gh-pages를-이용한-배포" aria-hidden="true">#</a> <code>gh-pages</code>를 이용한 배포</h3>',7),r=(0,t.Uk)("npm 패키지 중에 "),i={href:"https://github.com/tschaub/gh-pages",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("gh-pages"),g=(0,t.Uk)("라는 것이 있다. 글자 그대로 github pages에 배포를 대신해주는 패키지이다. 이를 이용하면 "),l=(0,t.Wm)("code",null,".gitignore",-1),c=(0,t.Uk)("에 있는 파일, 폴더라도 배포가 가능하다."),p=(0,t.uE)('<p>내부 코드를 살펴보면 결국 같은 위치에서 로컬의 git을 이용하고 있는데 어떻게 <code>.gitignore</code>를 무시하고 있는지는 잘 모르겠다.</p><p>어찌됐든 gh-pages를 이용해 배포하면 문제 없이 배포가 가능하다.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>% npx gh-pages -d build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>-d</code> 옵션을 지정해 배포할 폴더를 지정할 수 있다. <code>-b</code> 옵션을 이용하면 브랜치 이름을 지정할 수 있다(기본 gh-pages).</p><h3 id="이미-브랜치가-있다며-배포가-안될-때" tabindex="-1"><a class="header-anchor" href="#이미-브랜치가-있다며-배포가-안될-때" aria-hidden="true">#</a> 이미 브랜치가 있다며 배포가 안될 때</h3><p>캐시를 초기화하면 문제가 해결된다.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>rm -rf node_modules/.cache/gh-pages\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>rm</code>을 쓸 때는 언제나 조심.</p>',8),u={render:function(e,a){const s=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[n,(0,t.Wm)("p",null,[r,(0,t.Wm)("a",i,[d,(0,t.Wm)(s)]),g,l,c]),p],64)}}}}]);