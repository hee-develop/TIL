(self.webpackChunk=self.webpackChunk||[]).push([[493],{5474:(e,t,r)=>{"use strict";r.r(t),r.d(t,{data:()=>n});const n={key:"v-2b9e61f3",path:"/ko/frontend/micro-frontend.html",title:"Microfrontend",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[],filePathRelative:"ko/frontend/micro-frontend.md",git:{updatedTime:1628002356e3,contributors:[]}}},6884:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});const n=(0,r(6252).uE)('<h1 id="microfrontend" tabindex="-1"><a class="header-anchor" href="#microfrontend" aria-hidden="true">#</a> Microfrontend</h1><p><code>Written: 2021-06-22</code></p><p>백엔드에서의 마이크로서비스를 프론트엔드에 적용시킨 개념.</p><ul><li>마이크로 프론트엔드는 화면을 &#39;작동 가능한 단위&#39;로 나누어 개발하는 방법이다.</li><li>&#39;서비스&#39;단위가 아닌 화면의 &#39;컴포넌트&#39;단위로 나눈다는 것이 마이크로 서비스와의 차이점.</li><li>컴포넌트 단위로 개발되며, 배포된다. 대부분의 경우 묶여지기는 하지만(bundled), 모놀리식 배포에서 벗어날 수 있다.</li><li><strong>프론트 프레임워크에 의존하지 않는다</strong>. 즉 한 화면에 Vue, React, Angular 등이 동시에 들어갈 수 있다.</li><li>프레임워크에 의존하지 않으면서 여러 컴포넌트를 넣는 방법은 <code>iframe</code>과 <code>WebComponent</code>가 있다.</li><li>이 시대에 <code>iframe</code>을 쓰는 개발자는 없으므로, 보통 웹 컴포넌트로 개발한다.</li><li>프론트 프레임워크는 웹 컴포넌트로 개발할 수 있는 가이드가 있기 때문에 쉽게 적용할 수 있다.</li></ul><p>개발론적인 얘기라 참 거짓을 논할 주제는 아니지만, 도입할 때 회사에 맞게끔 어디까지 잘게 쪼갤건지에 대한 것을 염두해 두는 것이 좋을 것 같다. 소수 인원으로 운영되는 서비스에 마이크로 프론트엔드 개념은 지나치게 장황하다.</p>',5),i={render:function(e,t){return n}}}}]);