(self.webpackChunk=self.webpackChunk||[]).push([[1852],{6567:(l,e,i)=>{"use strict";i.r(e),i.d(e,{data:()=>r});const r={key:"v-b1fd6824",path:"/ko/server/microservice.html",title:"Microservice",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[{level:3,title:"마이크로서비스란",slug:"마이크로서비스란",children:[]},{level:3,title:"모놀리식 아키텍처의 단점",slug:"모놀리식-아키텍처의-단점",children:[]},{level:3,title:"마이크로서비스 아키텍처의 장점",slug:"마이크로서비스-아키텍처의-장점",children:[]},{level:3,title:"마이크로서비스 아키텍처의 단점",slug:"마이크로서비스-아키텍처의-단점",children:[]},{level:3,title:"마이크로서비스가 무조건 좋을까?",slug:"마이크로서비스가-무조건-좋을까",children:[]},{level:3,title:"소감",slug:"소감",children:[]},{level:3,title:"참고 링크",slug:"참고-링크",children:[]}],filePathRelative:"ko/server/microservice.md",git:{updatedTime:1624775244e3,contributors:[{name:"hee-develop",email:"hee950320@yahoo.co.jp",commits:1}]}}},407:(l,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>c});var r=i(6252);const a=(0,r.uE)('<h1 id="microservice" tabindex="-1"><a class="header-anchor" href="#microservice" aria-hidden="true">#</a> Microservice</h1><p><code>Written: 2021-01-31 02-01 02-02</code></p><h3 id="마이크로서비스란" tabindex="-1"><a class="header-anchor" href="#마이크로서비스란" aria-hidden="true">#</a> 마이크로서비스란</h3><p>마이크로서비스는 애플리케이션을 <strong>독립적인 서비스</strong>로 나누어 개발하는 아키텍처 기반의 접근 방식이다. 이렇게 나누어진 서비스는 별도로 정의된 인터페이스로 통신하며, 독립적으로 실행되기 때문에 모놀리식 방식보다 유연한 대처가 가능해진다.</p><h3 id="모놀리식-아키텍처의-단점" tabindex="-1"><a class="header-anchor" href="#모놀리식-아키텍처의-단점" aria-hidden="true">#</a> 모놀리식 아키텍처의 단점</h3><p>기존 애플리케이션(모놀리식, monolithic)은 하나의 프로세스 안에 모든 서비스를 담고 있기 때문에 다음과 같은 문제가 생길 수 있다.</p><ul><li>배포에 많은 시간이 걸림 <ul><li>특정 기능의 사소한 버그에 대한 핫픽스를 만들어도 전체 애플리케이션을 다시 컴파일할 필요가 있음</li></ul></li><li>장애 처리에 대한 어려움 <ul><li>특정 기능에 장애가 생겼을 때 프로세스가 죽거나 하면 다른 기능도 함께 사용하지 못하는 경우가 발생</li></ul></li><li>대규모 서비스를 제공할 때 생기는 공간적인 제약 <ul><li>애플리케이션이 하나로 묶여 있기 때문에, 부분적인 스케일 아웃이 어려움</li></ul></li><li>한정된 기술 <ul><li>하나의 애플리케이션에 여러 기술(프레임워크 등)을 넣는 것이 어려움</li></ul></li><li>코드의 규모가 커짐 <ul><li>초창기 멤버가 아니면 전체 구조가 어떻게 되어 있는지 알기 어려움</li><li>이미 있는지 파악이 되지 않은 상태에서 중복된 코드를 생성할 가능성이 있음</li><li>기능 간의 의존성이 생길 가능성이 높음</li></ul></li></ul><p>단점을 보면 대부분 &#39;하나로 묶여 있어서&#39;, 즉 결합도가 높은 것이 문제라는 것을 알 수 있다.</p><h3 id="마이크로서비스-아키텍처의-장점" tabindex="-1"><a class="header-anchor" href="#마이크로서비스-아키텍처의-장점" aria-hidden="true">#</a> 마이크로서비스 아키텍처의 장점</h3><ul><li>배포가 빨라짐 <ul><li>서비스 단위로 배포하므로 전체 배포보다 빨라짐</li></ul></li><li>장애 대응 <ul><li>특정 기능에 문제가 생겨도 서비스 전체가 멈추는 일이 발생하지는 않음</li><li>(서비스 사용이 불가능한 것과는 별도. 일례로 구글 로그인 기능에 문제가 생겨 구글의 거의 모든 기능이 마비된 적이 있었음)</li></ul></li><li>높은 확장성 <ul><li>서비스별로 다른 프로세스를 갖기 때문에 특정 서비스에 자원을 집중시키는 것이 가능해짐</li></ul></li><li>여러 기술의 도입이 가능 <ul><li>API로 통신하므로 규격만 맞춰 통신하면 어떤 기술이든 도입 가능</li></ul></li><li>코드 파악이 용이해짐 <ul><li>기능 간의 의존성이 낮아지므로, 전체 코드를 완벽히 이해하고 있지 않아도 개발이 가능해짐</li></ul></li></ul><h3 id="마이크로서비스-아키텍처의-단점" tabindex="-1"><a class="header-anchor" href="#마이크로서비스-아키텍처의-단점" aria-hidden="true">#</a> 마이크로서비스 아키텍처의 단점</h3><ul><li>성능 저하 <ul><li>프로세스 간 메모리를 공유하지 않음. 즉 서비스 간 별도의 통신이 필요해짐</li><li>통신은 처리와 지연 등이 필연적으로 발생하기 때문에 반응속도가 느려질 가능성이 높음</li></ul></li><li>트랜잭션 관리의 어려움 <ul><li>서비스 간의 트랜잭션에 대한 관리가 어려워짐</li></ul></li><li>디버깅, 서비스 모니터링의 어려움 <ul><li>서비스 간의 디버깅을 하는 것이 상당히 까다로움</li></ul></li></ul><h3 id="마이크로서비스가-무조건-좋을까" tabindex="-1"><a class="header-anchor" href="#마이크로서비스가-무조건-좋을까" aria-hidden="true">#</a> 마이크로서비스가 무조건 좋을까?</h3><ul><li>&#39;무조건 좋은&#39; 기술은 없다.</li><li>실제로 비용이 절감될까? <ul><li>생각보다 부하가 많지 않은 서비스라면 도입하는 데 드는 시간적 비용이 더 비쌀 수도 있다</li></ul></li><li>생산성이 향상될까? <ul><li>단점에서 나와 있는 디버깅 등에 대한 어려움이 발생하므로, 이전보다 오히려 저하될 수 있다</li><li>팀이 개발/운영을 함께 할 수 있는가?</li></ul></li></ul><hr><h3 id="소감" tabindex="-1"><a class="header-anchor" href="#소감" aria-hidden="true">#</a> 소감</h3><p>서비스의 규모가 크다고 해서 무조건 마이크로서비스가 좋다는 편견은 이 글을 쓰면서 버릴 수 있게 되었다. 특히 개발과 운영을 함께 할 수 있는 팀인지 아닌지는 마이크로서비스를 도입하면서 중요한 판단 기준 중 하나라고 생각된다..</p><h3 id="참고-링크" tabindex="-1"><a class="header-anchor" href="#참고-링크" aria-hidden="true">#</a> 참고 링크</h3>',18),t={href:"https://medium.com/@yesesyo/%EA%B0%80%EB%B3%8D%EA%B2%8C-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%B6%95%ED%95%B4%EB%B3%B4%EA%B8%B0-1-fb4d7741b316",target:"_blank",rel:"noopener noreferrer"},u=(0,r.Uk)("가볍게 마이크로서비스 구축해보기-1"),h={href:"https://www.samsungsds.com/kr/insights/msa.html",target:"_blank",rel:"noopener noreferrer"},n=(0,r.Uk)("Do Not Use MSA - 마이크로서비스 아키텍처가 꼭 필요한가요?"),d={href:"http://guruble.com/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4microservice-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B7%B8%EA%B2%83%EC%9D%B4-%EB%AD%A3%EC%9D%B4-%EC%A4%91%ED%97%8C%EB%94%94/?ckattempt=1",target:"_blank",rel:"noopener noreferrer"},s=(0,r.Uk)("마이크로서비스 아키텍처. 그것이 뭣이 중헌디?"),c={render:function(l,e){const i=(0,r.up)("OutboundLink");return(0,r.wg)(),(0,r.j4)(r.HY,null,[a,(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,[(0,r.Wm)("a",t,[u,(0,r.Wm)(i)])]),(0,r.Wm)("li",null,[(0,r.Wm)("a",h,[n,(0,r.Wm)(i)])]),(0,r.Wm)("li",null,[(0,r.Wm)("a",d,[s,(0,r.Wm)(i)])])])],64)}}}}]);