(self.webpackChunk=self.webpackChunk||[]).push([[2579],{9670:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-c574081c",path:"/_draft/Typescript/05%20-%20Typescript%20basic5.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Date: 2021-02-25",slug:"date-2021-02-25",children:[]},{level:2,title:"Typescript 기초5",slug:"typescript-기초5",children:[{level:3,title:"클래스의 비공개 필드",slug:"클래스의-비공개-필드",children:[]},{level:3,title:"private",slug:"private",children:[]},{level:3,title:"protected",slug:"protected",children:[]},{level:3,title:"readonly",slug:"readonly",children:[]},{level:3,title:"매개변수 프로퍼티(Parameter properties)",slug:"매개변수-프로퍼티-parameter-properties",children:[]},{level:3,title:"추상 클래스",slug:"추상-클래스",children:[]}]}],filePathRelative:"_draft/Typescript/05 - Typescript basic5.md",git:{updatedTime:null,contributors:[]}}},4109:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>i});var e=a(6252);const p=(0,e.Wm)("h2",{id:"date-2021-02-25",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#date-2021-02-25","aria-hidden":"true"},"#"),(0,e.Uk)(" Date: 2021-02-25")],-1),t=(0,e.Wm)("h2",{id:"typescript-기초5",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#typescript-기초5","aria-hidden":"true"},"#"),(0,e.Uk)(" Typescript 기초5")],-1),c=(0,e.Uk)("from "),l={href:"https://typescript-kr.github.io/",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("Typescript-kr"),o=(0,e.uE)('<h3 id="클래스의-비공개-필드" tabindex="-1"><a class="header-anchor" href="#클래스의-비공개-필드" aria-hidden="true">#</a> 클래스의 비공개 필드</h3><p>비공개 필드를 쓸 수 있다는 사실 자체를 모르고 있었는데, 자바스크립트에서 이미 구현되어 있는(ES2019) 기능이었다.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  #name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>혹은 일반적인 <code>private</code>를 붙여 표기하는 것도 가능하다.</p><h3 id="private" tabindex="-1"><a class="header-anchor" href="#private" aria-hidden="true">#</a> private</h3><p><code>private</code> 프로퍼티는 덕 타이핑이 되지 않음</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> human <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nanimal <span class="token operator">=</span> human<span class="token punctuation">;</span> <span class="token comment">// Human.name은 Animal.name과는 다른 속성(이름만 같음)이므로 대입이 불가능함</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="protected" tabindex="-1"><a class="header-anchor" href="#protected" aria-hidden="true">#</a> protected</h3><p>C++의 그것</p><h3 id="readonly" tabindex="-1"><a class="header-anchor" href="#readonly" aria-hidden="true">#</a> readonly</h3><p>선언 혹은 생성자에서 반드시 초기화해야만 함</p><h3 id="매개변수-프로퍼티-parameter-properties" tabindex="-1"><a class="header-anchor" href="#매개변수-프로퍼티-parameter-properties" aria-hidden="true">#</a> 매개변수 프로퍼티(Parameter properties)</h3><p><code>public</code> <code>protected</code> <code>private</code> <code>readonly</code>를 붙여 매개변수를 선언하면, 클래스에 자동으로 프로퍼티를 추가해 줌</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> numberOfLegs<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// readonly name: string 을 선언함과 동시에 초기화</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="추상-클래스" tabindex="-1"><a class="header-anchor" href="#추상-클래스" aria-hidden="true">#</a> 추상 클래스</h3><p>자바와 비슷한 문법.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token keyword">abstract</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;move&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',17),i={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,t,(0,e.Wm)("p",null,[c,(0,e.Wm)("a",l,[r,(0,e.Wm)(a)])]),o],64)}}}}]);