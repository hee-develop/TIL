(self.webpackChunk=self.webpackChunk||[]).push([[5222],{1200:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-3bdf7514",path:"/ko/development-theory/duck-typing.html",title:"Duck typing",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[{level:3,title:"참고 링크",slug:"참고-링크",children:[]}],filePathRelative:"ko/development-theory/duck-typing.md",git:{updatedTime:1628030041e3,contributors:[]}}},7371:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>u});var p=a(6252);const e=(0,p.uE)('<h1 id="duck-typing" tabindex="-1"><a class="header-anchor" href="#duck-typing" aria-hidden="true">#</a> Duck typing</h1><p><code>Written: 2021-02-20</code></p><p>동적 타이핑의 한 종류. <strong>객체의 변수 및 메소드의 집합이 객체의 타입을 결정</strong>하는 것<br> 클래스, 인터페이스 등으로 타입을 나누는 것이 아닌, 어떠한 프로퍼티 혹은 메소드를 가지고 있으면 해당 타입에 속하는 것으로 간주</p><p>타입에 대해 비교적 자유롭기 때문에, 편하며, <strong>행위 본질에 집중</strong>할 수 있다는 장점을 갖고 있다.<br> 그러나 해당 대상이 없는 객체에서 대상을 부르려고 하게 되는 경우 런타임 오류가 발생할 수 있다는 단점 역시 존재한다.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>\n  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Duck Quack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Person Quack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">sayQuack</span><span class="token punctuation">(</span><span class="token parameter">quackable</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  quackable<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">sayQuack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Duck Quack</span>\n<span class="token function">sayQuack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Person Quack</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>javascript 하는 사람들이 보면 당연한 거 아닌가? 라는 생각이 들지도 모르겠다..<br><code>Duck</code>과 <code>Person</code>은 아무런 연관성이 없는 클래스임에도 불구하고, <code>sayQuack</code>에 의해 불리어 <code>quack</code>메소드를 실행하고 있다.<br> 이는 <code>sayQuack</code>의 <code>quackable</code>의 타입이 무엇이든(설사 <code>number</code>타입이더라도) <code>quack</code> 메소드를 부르는 행위에 관심을 갖고 있기 때문에 가능하다.</p><p><code>Duck</code>은 <code>Quackable</code>을 구현해 만든 클래스로 <code>quack</code>메소드가 존재한다.<br><code>Person</code>은 <code>Quackable</code>을 구현하지 않은 클래스임에도 불구하고, 자체적으로 <code>quack</code>메소드를 구현해 놓았다.</p><h3 id="참고-링크" tabindex="-1"><a class="header-anchor" href="#참고-링크" aria-hidden="true">#</a> 참고 링크</h3>',8),c=(0,p.Wm)("li",null,"https://ko.wikipedia.org/wiki/%EB%8D%95_%ED%83%80%EC%9D%B4%ED%95%91",-1),t={href:"https://stackoverflow.com/questions/1079785/whats-an-example-of-duck-typing-in-java",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("What's an example of duck typing in Java?"),u={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("ul",null,[c,(0,p.Wm)("li",null,[(0,p.Wm)("a",t,[o,(0,p.Wm)(a)])])])],64)}}}}]);